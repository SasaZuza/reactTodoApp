{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","index.js"],"names":["Header","react_default","a","createElement","style","headerStyle","Link","linkStyle","to","background","color","textAlign","padding","textDecoration","TodoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","borderBottom","props","todo","completed","inherits","createClass","key","value","_this$props$todo","id","title","itemStyle","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","components_TodoItem","AddTodo","state","e","setState","defineProperty","target","name","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","About","Fragment","App","axios","delete","then","res","toConsumableArray","filter","post","data","_this2","get","_this3","BrowserRouter","Route","exact","path","render","components_AddTodo","components_Todos","component","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.33021a3c.chunk.js","sourcesContent":["import React from 'react'\r\n// Allows us to use 'Link' option to link to some pages from home page (other components)\r\nimport { Link } from 'react-router-dom'\r\n\r\n// This is example of functional component\r\nexport default function Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n\r\n            <h1>TodoList</h1>\r\n\r\n            {/* Adding two link to the header component */}\r\n            <Link style={linkStyle} to='/'>Home</Link> | <Link style={linkStyle} to='/about'>About</Link>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}","import React, { Component } from 'react'\r\n// We importing stuff that is needed to define type of properties\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n\r\n    // Here we define method for styling <div>\r\n    getStyle = () => {\r\n        /*\r\n        if (this.props.todo.completed) {\r\n            return {\r\n                textDecoration: 'line-through'\r\n            }\r\n        } else {\r\n            return {\r\n                textDecoration: 'none'\r\n            }\r\n        }\r\n        */\r\n\r\n        // This is shorter way to do the same thing with ternary operator \r\n        // We added here some aditional styling\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        // We can use destructuring to make easy acces to some props like bellow\r\n        const { id, title } = this.props.todo;\r\n\r\n        return (\r\n            // Adding inline styling is done with style tag and atributes like in CSS\r\n            // Commands are the same except we use CamelCase style\r\n            // EX: '<div style={{ backgroundColor: '#f4f4f4' }}>'\r\n            // We can also add a method to do styling\r\n            <div style={this.getStyle()}>\r\n                {/* The way of accessing the todo props and displaying data from it */}\r\n                {/* When we call variables for styling we use only one '{}' */}\r\n                <p style={itemStyle}>\r\n                    {/* On input tag we add event that will trigger some method (in this case 'mark complete') */}\r\n                    {/* Because we use props we must go to 'Todos.js' component to access that props we want to manipulate */}\r\n                    {/* We use 'bind' method to access 'id' of state */}\r\n                    {/* Bellow is longer way of accessing some of props */}\r\n                    {/*<input type=\"checkbox\" onChange={this.props.markComplete.bind(this, this.props.todo.id)} /> */}\r\n\r\n                    {/* With use of destructuring we can acces props without 'this.props.todo.id' */}\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} />\r\n                    {' '}\r\n\r\n                    {/* Bellow is longer way of accessing some other props */}\r\n                    {/* {this.props.todo.title} */}\r\n                    {/* With use of destructuring we can acces props without 'this.props.todo.title' */}\r\n                    {title}\r\n\r\n                    {/* Button that will be used to delete todo - styling is used with variable */}\r\n                    {/* We use the same system like with 'markComplete' to get to the 'App.js' state */}\r\n                    <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// This is how we are inspecting the type of props = 'todo' props\r\n// In this case props are object\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n// We can add variables to do styling also\r\nconst itemStyle = {\r\n    color: 'darkred'\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\n// Importing TodoItem.js component\r\nimport TodoItem from './TodoItem';\r\n// We importing stuff that is needed to define type of properties\r\nimport PropTypes from 'prop-types';\r\n\r\n// This is also class based component\r\nclass Todos extends Component {\r\n\r\n    render() {\r\n        // this.props.todos  - We use it to access 'todos' state as a props \r\n        // We use 'map()' to loop trought state 'todos' and outpu each todo \r\n        return this.props.todos.map((todo) => (\r\n            // We output here new component 'TodoItem.js'\r\n            // 'todo' is prop of TodoItem component\r\n            // Every prop must have unique key so we add property 'id' from 'todos' state \r\n            // Here we by using props access method 'markComplete' method from 'TodoItem.js' component\r\n            // Because we use props we must go to 'App.js' component to access that state we want to manipulate\r\n            // We do the same patht with 'delTodo' event\r\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n        ));\r\n    }\r\n}\r\n\r\n// This is how we are inspecting the type of props = 'todos' props\r\n// In this case props are array (array of objects) and function\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class AddTodo extends Component {\r\n\r\n    // Here we create state and adding value for title as empty\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    // This is method that is activated after adding content to input form\r\n    // With 'e' we target value stribute of input form and add make it equal to title in state\r\n    // [e.target.name] - we connects to 'name' atribute of input field so when name is the same we can use it for many other input filds\r\n    onChange = (e) => this.setState({\r\n        [e.target.name]: e.target.value\r\n    });\r\n\r\n    // This is method that is activated after submiting a form\r\n    onSubmit = (e) => {\r\n        // With this we preventing submiting the whole document by default\r\n        e.preventDefault();\r\n        // We add as new todo text that we enter into input  \r\n        this.props.addTodo(this.state.title);\r\n        // After inputing text and submiting we want to clear the form \r\n        this.setState({ title: '' });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            // Adding some form to this component with some basic styling\r\n            // We are adding 'onSubmit' event to the whole form and not to the Submit button\r\n            // This event is triggering some method (in this case it's 'onSubmit') \r\n            <form onSubmit={this.onSubmit} style={{ display: 'flex' }} >\r\n\r\n                {/* As a value for this input form we connect to 'state.title' */}\r\n                {/* We add 'onChange' method to change state title after typing in input field */}\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Add todo...\"\r\n                    style={{ flex: '10', padding: '5px' }}\r\n                    value={this.state.title}\r\n                    onChange={this.onChange}\r\n                />\r\n\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Submit\"\r\n                    className=\"btn\"\r\n                    style={{ flex: '1' }}\r\n                />\r\n\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n// This is how we are inspecting the type of props = 'todos' props\r\n// In this case props are function\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default AddTodo \r\n","import React from 'react'\r\n\r\n// This is example of functional component\r\nexport default function About() {\r\n    return (\r\n        // If we don't want to use div in component we use this tag to be like 'ghost' element\r\n        <React.Fragment>\r\n            <h1> About </h1>\r\n            <p> This is React ToDo App that is created as a part of Traversy media React chrash course for 2019. </p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\n// Here we import stuff from react Router that is instaled by npm with 'npm i react-router-dom'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\n// Importing 'Header' component from 'components/layout' folder\r\nimport Header from './components/layout/Header';\r\n// Importing 'Todos' component from 'components' folder \r\nimport Todos from './components/Todos';\r\n// Importing 'AddTodo' component from 'components' folder \r\nimport AddTodo from './components/AddTodo';\r\n// Importing 'About' component from 'components/pages' folder \r\nimport About from './components/pages/About';\r\n// Importing option of uuid that is instaled with npm option 'npm i uuid'\r\n// import uuid from 'uuid';\r\n// We import axios that is used to make 'http' request - instaled with 'npm i axios'  \r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\n\r\n// This is main React component and it's class based component\r\nclass App extends Component {\r\n\r\n  // Way of creating state like array of objects\r\n  // In 'id' property we use 'uuid:v4()' to generate automaticly new id\r\n  state = {\r\n\r\n    todos: [\r\n      /*\r\n      // This is todo list that is hard-coded to file and after we will use JSONPlaceholder \r\n     {\r\n       id: uuid.v4(),\r\n       title: 'Program with React',\r\n       completed: false\r\n     },\r\n\r\n     {\r\n       id: uuid.v4(),\r\n       title: 'Complete D3 projects for freeCodeCamp',\r\n       completed: false\r\n     },\r\n\r\n     {\r\n       id: uuid.v4(),\r\n       title: 'Running or other exercise',\r\n       completed: false\r\n     }\r\n   */\r\n    ]\r\n  }\r\n\r\n\r\n  // Life cycle method \"componentDidMounth()\" runs after component mounted\r\n  componentDidMount() {\r\n    // With axios we send request to use JSONPlaceholder link with todos in it\r\n    // '?_limit=10' we limit shown todos to 10\r\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\r\n      // With 'then' we add a promise to show those todos in app after mounting\r\n      // We 'setState' and display in todos\r\n      .then(res => this.setState({ todos: res.data }))\r\n  }\r\n\r\n\r\n  // Here we create 'markComplete' method\r\n  markComplete = (id) => {\r\n    // console.log('We are finally there!');\r\n\r\n    // Wen we click on todo checkbox the id of is consoled\r\n    // console.log(id);\r\n\r\n    // Changing state with 'setState'\r\n    // We are chacking if selected if is qqual to id in state \r\n    // If it is then we change completed property of state to oposite value ( 'todo.completed = !todo.completed' )\r\n    this.setState({\r\n      todos: this.state.todos.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  }\r\n\r\n\r\n  // Here we create 'delTodo' method\r\n  delTodo = (id) => {\r\n\r\n    // axios request to delete todo from app \r\n    // Beside JSONPlaceholder link of todos we need to add it's id with '${id}'\r\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\r\n      // After that we add a promise to delete todo on server and uprade app\r\n      .then(res => this.setState({\r\n        todos: [...this.state.todos.filter(todo => todo.id !== id)]\r\n      }));\r\n\r\n    // When we click on 'x' button we console log id of todo\r\n    // console.log(id);\r\n\r\n    // We use 'setState' to delete one todo\r\n    // with spread operator '...' we access the state and with filter method we delete todo\r\n    // For deleting we do the matching with the id that is clicked and id that is in state\r\n    /*\r\n    // This is how we delete todo without using axios options\r\n    this.setState({\r\n      todos: [...this.state.todos.filter(todo => todo.id !== id)]\r\n    });\r\n    */\r\n  }\r\n\r\n  // Adding this function that will add text that is entered into input tag to todo list as new todo\r\n  addTodo = (title) => {\r\n    // This displays in console text that is entered as title\r\n    // console.log(title);\r\n\r\n    // Here we declare this 'newTodo' as variable\r\n    // It adds properties of todo (id, title and completed)\r\n    // title of todo is equal that 'title' that is entered in input field and declared in 'addTodo' component\r\n    // In 'id' property we use 'uuid:v4()' to generate automaticly new id\r\n    /*\r\n    // This code we use when we add data (todo) to app without 'post' request\r\n    const newTodo = {\r\n      id: uuid.v4(),\r\n      title: title,\r\n      completed: false\r\n    }\r\n    */\r\n\r\n    // Using 'axios' and we make post request to this link\r\n    // It doesn't make that request and add data it just simulate that (first parameter)\r\n    // Second parameter is title that is equal typed value and completed status\r\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\r\n      title: title,\r\n      completed: false\r\n\r\n      // We use 'setState' to add inputed text as todo to state\r\n      // With spread operator '...' we copy content of state and with 'newTodo' variable we add new todo to state\r\n      // 'res.data' gives back new todo\r\n    }).then(res => this.setState({\r\n      todos: [...this.state.todos, res.data]\r\n    }));\r\n\r\n    // This is used when we add todo without post request\r\n    /*\r\n    // We use 'setState' to add inputed text as todo to state\r\n    // With spread operator '...' we copy content of state and with 'newTodo' variable we add new todo to state \r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo]\r\n    });\r\n    */\r\n  }\r\n\r\n\r\n  // Render method is most important method in this app\r\n  // Inside render there is return that returns JSX (looks like HTML)\r\n  render() {\r\n    return (\r\n      // If we use Router we want to wrap all content of app in this <Router> tag\r\n      <Router>\r\n        <div className=\"App\">\r\n\r\n          <div className=\"container\">\r\n\r\n            {/* Adding 'Header' component to the app <div> */}\r\n            <Header />\r\n\r\n            {/* When we added this route tag we put all content in this route that will be displayed in home page */}\r\n            {/* Adding 'exact' option means that it will show only content inside this Route bellow */}\r\n            <Route exact path=\"/\" render={props => (\r\n\r\n              <React.Fragment>\r\n\r\n                {/* Adding 'AddTodo' component to the app <div> */}\r\n                {/* On this component we add also 'addTodo' prop and declare function above */}\r\n                <AddTodo addTodo={this.addTodo} />\r\n\r\n                {/* Using tag like bellow we add component to out main App.js component */}\r\n                {/* todos={this.state.todos} - We are taking state 'todos' and adding it to 'Todos' component as a prop */}\r\n                {/* We are now at the top of chain and we can access state and change it with this 'markComplete' method */}\r\n                {/* Path was from 'TodoItem.js' to 'Todo.js' to 'App.js' */}\r\n                {/* The same way of using 'delTodo' is like with 'markComplete' */}\r\n                <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />\r\n\r\n              </React.Fragment>\r\n\r\n            )} />\r\n\r\n            {/* Adding new 'Route' to connect to about page */}\r\n            <Route path=\"/about\" component={About} />\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </Router>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n// main App.js component is rendered into .html id=\"root\" <div>\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}